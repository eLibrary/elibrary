package com.elib.entity;

// Generated Nov 16, 2013 10:36:05 PM by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * User generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "user")
public class User implements java.io.Serializable, IEntity<Integer> {

  private Integer id;
  private Role role;
  private String firstName;
  private String lastName;
  private String email;
  private String password;
  private Date dateOfBirth;
  private String avatar;

  private Set<UserLibrary> userlibraries = new HashSet<UserLibrary>(0);
  private Set<Owner> owners = new HashSet<Owner>(0);

  public User() {
  }

  public User(Role role, String firstName, String lastName, String email, String password, Date dateOfBirth) {
    this.role = role;
    this.firstName = firstName;
    this.lastName = lastName;
    this.email = email;
    this.password = password;
    this.dateOfBirth = dateOfBirth;
  }

  public User(Role role, String firstName, String lastName, String email, String password, Date dateOfBirth,
          String avatar, Set<UserLibrary> userlibraries, Set<Owner> owners) {
    this.role = role;
    this.firstName = firstName;
    this.lastName = lastName;
    this.email = email;
    this.password = password;
    this.dateOfBirth = dateOfBirth;
    this.avatar = avatar;
    this.userlibraries = userlibraries;
    this.owners = owners;
  }

  @Id
  @GeneratedValue(strategy = IDENTITY)
  @Column(name = "ID", unique = true, nullable = false)
  public Integer getId() {
    return this.id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "RoleID", nullable = false)
  public Role getRole() {
    return this.role;
  }

  public void setRole(Role role) {
    this.role = role;
  }

  @Column(name = "FirstName", nullable = false, length = 40)
  public String getFirstName() {
    return this.firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  @Column(name = "LastName", nullable = false, length = 40)
  public String getLastName() {
    return this.lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  @Column(name = "Email", nullable = false, length = 30)
  public String getEmail() {
    return this.email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  @Column(name = "Password", nullable = false, length = 40)
  public String getPassword() {
    return this.password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "DateOfBirth", nullable = false, length = 19)
  public Date getDateOfBirth() {
    return this.dateOfBirth;
  }

  public void setDateOfBirth(Date dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }

  @Column(name = "Avatar", length = 60)
  public String getAvatar() {
    return this.avatar;
  }

  public void setAvatar(String avatar) {
    this.avatar = avatar;
  }

  @OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
  public Set<UserLibrary> getUserlibraries() {
    return this.userlibraries;
  }

  public void setUserlibraries(Set<UserLibrary> userlibraries) {
    this.userlibraries = userlibraries;
  }

  @OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
  public Set<Owner> getOwners() {
    return this.owners;
  }

  public void setOwners(Set<Owner> owners) {
    this.owners = owners;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((avatar == null) ? 0 : avatar.hashCode());
    result = prime * result + ((dateOfBirth == null) ? 0 : dateOfBirth.hashCode());
    result = prime * result + ((email == null) ? 0 : email.hashCode());
    result = prime * result + ((firstName == null) ? 0 : firstName.hashCode());
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((lastName == null) ? 0 : lastName.hashCode());
    result = prime * result + ((owners == null) ? 0 : owners.hashCode());
    result = prime * result + ((password == null) ? 0 : password.hashCode());
    result = prime * result + ((role == null) ? 0 : role.hashCode());
    result = prime * result + ((userlibraries == null) ? 0 : userlibraries.hashCode());
    return result;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    User other = (User) obj;
    if (avatar == null) {
      if (other.avatar != null)
        return false;
    } else if (!avatar.equals(other.avatar))
      return false;
    if (dateOfBirth == null) {
      if (other.dateOfBirth != null)
        return false;
    } else if (!dateOfBirth.equals(other.dateOfBirth))
      return false;
    if (email == null) {
      if (other.email != null)
        return false;
    } else if (!email.equals(other.email))
      return false;
    if (firstName == null) {
      if (other.firstName != null)
        return false;
    } else if (!firstName.equals(other.firstName))
      return false;
    if (id == null) {
      if (other.id != null)
        return false;
    } else if (!id.equals(other.id))
      return false;
    if (lastName == null) {
      if (other.lastName != null)
        return false;
    } else if (!lastName.equals(other.lastName))
      return false;
    if (owners == null) {
      if (other.owners != null)
        return false;
    } else if (!owners.equals(other.owners))
      return false;
    if (password == null) {
      if (other.password != null)
        return false;
    } else if (!password.equals(other.password))
      return false;
    if (role == null) {
      if (other.role != null)
        return false;
    } else if (!role.equals(other.role))
      return false;
    if (userlibraries == null) {
      if (other.userlibraries != null)
        return false;
    } else if (!userlibraries.equals(other.userlibraries))
      return false;
    return true;
  }
  
  

}
